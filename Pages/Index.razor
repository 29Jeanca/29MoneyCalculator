@page "/"
@using _29MoneyCalculator.Class.Interfaces;
@using _29MoneyCalculator.Class;
@using _29MoneyCalculator.Controladores;
@using _29MoneyCalculator.Modelos;
@inject IDialogService DialogService

<style>
    body
    {
        box-sizing:border-box;
        margin:0;
        padding:0;
    }

    .main-content {
        display: flex;
        text-align:center;
        flex-direction: column;
        min-height: 100vh;
        align-content: center;
        justify-content: center;
        margin-top: -110px;
    }
    h1 {
        color: #000;
        vertical-align:top;
        text-align: center;
        font-size: 40px;
        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    }

    a {
        color: #1919e6;
        text-decoration: none;
    }

    .enlaces {
        display: block;
        margin-top: 30px;
    }

    .btnLogin {
        background-color: #008f9c;
        width: 340px;
        margin-top: 30px;
        border-color: transparent;
        border-radius: 20px;
        color: #fff;
    }
    .inputs
    {
        border-radius:20px;
        border: solid 3px #dec783;
        
    }

</style>


@code {
    string email;
    string password;
    private UserController userController;

    public Index()
    {
        userController = new UserController();
    }
    private string GetDate()
    {
        DateTime date = DateTime.Now;
        int day;
        int month;
        int year;

        day = date.Day;
        month = date.Month;
        year = date.Year;
        string fullDate = $"{day}/{month}/{year}";
        return fullDate;
    }
    private void ValidateUser()
    {
        const string title = "Successful login.😁";
        const string message = $"Hello ";
        const string acceptBtn = "OK";
        const string closeBtn = "Close";
        var result = userController.UserInformation(email);
        if (userController.ValidateUser(email, password))
        {
            Session.Login(result.Item1, result.Item2);
            DialogService.DisplayConfirm($"{title}", $"{message} {Session.User_Name}", $"{acceptBtn}", $"{closeBtn}");
        } else
        {
            DialogService.DisplayConfirm("ERROR","Check your credentials and try again",$"{acceptBtn}",$"{closeBtn}");
        }
    }
}
<p>@GetDate()</p>
<h1>Welcome!</h1>

<div class="main-content">
<form>
    <div class="mb-3">
        <label for="exampleInputEmail1" class="form-label">Email address</label>
        <input type="email"
               class="form-control inputs"
               id="exampleInputEmail1"
               placeholder="Email address"
               aria-describedby="emailHelp"
               @bind="email"/>
    </div>
        <div class="form-group">
            <label for="password">Password</label>
            <div class="input-group">
                <input type="password" 
                    id="password" 
                    class="form-control inputs" 
                    placeholder="Enter your password" 
                    @bind="password">
                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                    <i class="fa fa-eye" aria-hidden="true"></i>
                </button>
            </div>
        </div>

    <div class="enlaces">
        <a href="/recoverpassword">Did you forget your password?</a>
    </div>
    <div class="enlaces">
        <a href="/createaccount">Not account? Create one here</a>
    </div>
        <button type="button" class="btnLogin" @onclick="ValidateUser">Login</button>
</form>
</div>
<script>
    const togglePassword = document.querySelector('#togglePassword');
    const password = document.querySelector('#password');

    togglePassword.addEventListener('click', function () {
        const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
        password.setAttribute('type', type);
        this.querySelector('i').classList.toggle('fa-eye');
        this.querySelector('i').classList.toggle('fa-eye-slash');
    });
</script>